
on:
  push:

jobs:
  identify-and-print:
    runs-on: ubuntu-latest
    outputs:
      project_origin: ${{ steps.check_project_name.outputs.project_origin }}
    steps:
      - name: Check for project_name in push payload
        id: check_project_name
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          echo "Commit Message: $commit_message"
          if [[ "$commit_message" == *"project_name="* ]]; then
            project_name=$(echo "$commit_message" | sed -n 's/.*project_name=\([^ ]*\).*/\1/p')
            echo "Project Name from commit message: $project_name"
            echo "project_origin=$project_name" >> $GITHUB_OUTPUT
          else
            echo "No project_name found in commit message."
            echo "project_origin=None" >> $GITHUB_OUTPUT

  dispatch:
    needs: identify-and-print
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Use project_origin output
        run: |
          project_origin="${{ needs.identify-and-print.outputs.project_origin }}"
          echo "Project Name for dispatch: $project_origin"
      
          
          repositories=(Brain CompetitionPCing)

          # Remove the project_origin from the repositories array
          for i in "${!repositories[@]}"; do
            if [[ "${repositories[$i]}" == "$project_origin" ]]; then
              unset 'repositories[i]'
            fi
          done

          echo "Repos to update: ${repositories[@]}"

          # # Uncomment the following block to perform the actual dispatch
          # # for repo in "${repositories[@]}"; do
          # #   echo "Dispatching event to repository: $repo"
          # #   gh api repos/"$repo"/dispatches \
          # #     -f event_type=update-subtree-$project_origin \
          # #     -f client_payload='{}' \
          # #     -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}"
          # # done

          # # Print the dispatch information
          # for repo in "${repositories[@]}"; do
          #   echo "Prepared to dispatch event to repository: $repo"
          #   echo "Event type: update-subtree-$project_origin"
          #   echo "Would use token: ${{ secrets.REPO_ACCESS_TOKEN }}"
          # done
